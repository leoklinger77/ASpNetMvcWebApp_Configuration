// <auto-generated />
using System;
using AspNetCoreMvc.Client.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AspNetCoreMvc.Client.Infrastructure.Migrations
{
    [DbContext(typeof(ClientContext))]
    partial class ClientContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AspNetCoreMvc.Client.Domain.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("varchar(256)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Complement")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Number")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Reference")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("State")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Street")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZipCode")
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("AspNetCoreMvc.Client.Domain.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Client");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Client");
                });

            modelBuilder.Entity("AspNetCoreMvc.Client.Domain.Models.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ddd")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("varchar(256)");

                    b.Property<int>("PhoneType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("AspNetCoreMvc.Client.Domain.Models.ClientJuridical", b =>
                {
                    b.HasBaseType("AspNetCoreMvc.Client.Domain.Models.Client");

                    b.Property<string>("Cnpj")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("FantasyName")
                        .HasColumnType("varchar(256)");

                    b.HasDiscriminator().HasValue("ClientJuridical");
                });

            modelBuilder.Entity("AspNetCoreMvc.Client.Domain.Models.ClientPhysical", b =>
                {
                    b.HasBaseType("AspNetCoreMvc.Client.Domain.Models.Client");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cpf")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)");

                    b.HasDiscriminator().HasValue("ClientPhysical");
                });

            modelBuilder.Entity("AspNetCoreMvc.Client.Domain.Models.Address", b =>
                {
                    b.HasOne("AspNetCoreMvc.Client.Domain.Models.Client", "Client")
                        .WithOne("Address")
                        .HasForeignKey("AspNetCoreMvc.Client.Domain.Models.Address", "ClientId")
                        .IsRequired();
                });

            modelBuilder.Entity("AspNetCoreMvc.Client.Domain.Models.Phone", b =>
                {
                    b.HasOne("AspNetCoreMvc.Client.Domain.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
